import inquirer from 'inquirer';
import inquirerSearchList from 'inquirer-search-list';
import { PrintableVaultCredential, PrintableVaultNote, VaultCredential, VaultNote } from '../types';
import PromptConstructor = inquirer.prompts.PromptConstructor;

export const prompt = inquirer.createPromptModule({ output: process.stderr });
prompt.registerPrompt('search-list', inquirerSearchList as PromptConstructor);

export const askMasterPassword = async (): Promise<string> => {
    const { masterPassword } = await prompt<{ masterPassword: string }>([
        {
            type: 'password',
            name: 'masterPassword',
            message: 'Please enter your master password:',
        },
    ]);
    return masterPassword;
};

export const askReplaceIncorrectMasterPassword = async () => {
    const { replaceMasterPassword } = await prompt<{ replaceMasterPassword: string }>([
        {
            type: 'list',
            name: 'replaceMasterPassword',
            message: 'The master password you provided is incorrect, would you like to retry?',
            choices: ['Yes', 'No'],
        },
    ]);
    return replaceMasterPassword === 'Yes';
};

export const askIgnoreBreakingChanges = async () => {
    const { ignoreBreakingChanges } = await prompt<{ ignoreBreakingChanges: string }>([
        {
            type: 'list',
            name: 'ignoreBreakingChanges',
            message:
                'Your local storage has been generated by a different version of the CLI and surely cannot be read. Would you like to:',
            choices: ['Reset your local storage', 'Ignore the warning'],
        },
    ]);
    return ignoreBreakingChanges === 'Ignore the warning';
};

export const askEmailAddress = async (): Promise<string> => {
    const { login } = await prompt<{ login: string }>([
        {
            type: 'input',
            name: 'login',
            message: 'Please enter your email address:',
        },
    ]);
    return login;
};

export const askConfirmReset = async () => {
    const { confirmReset } = await inquirer.prompt<{ confirmReset: string }>([
        {
            type: 'list',
            name: 'confirmReset',
            message: 'Do you really want to delete all local data from this app?',
            choices: ['Yes', 'No'],
        },
    ]);
    return confirmReset === 'Yes';
};

export const askCredentialChoice = async (params: { matchedCredentials: VaultCredential[]; hasFilters: boolean }) => {
    const message = params.hasFilters
        ? 'There are multiple results for your query, pick one:'
        : 'What password would you like to get?';

    const response = await prompt<{ printableCredential: PrintableVaultCredential }>([
        {
            type: 'search-list',
            name: 'printableCredential',
            message,
            choices: params.matchedCredentials.map((item) => {
                const printableItem = new PrintableVaultCredential(item);
                return { name: printableItem.toString(), value: printableItem };
            }),
        },
    ]);

    return response.printableCredential.vaultCredential;
};

export const askSecureNoteChoice = async (params: { matchedNotes: VaultNote[]; hasFilters: boolean }) => {
    const message = params.hasFilters
        ? 'There are multiple results for your query, pick one:'
        : 'What note would you like to get?';

    const response = await prompt<{ printableNote: PrintableVaultNote }>([
        {
            type: 'search-list',
            name: 'printableNote',
            message,
            choices: params.matchedNotes.map((item) => {
                const printableItem = new PrintableVaultNote(item);
                return { name: printableItem.toString(), value: printableItem };
            }),
        },
    ]);

    return response.printableNote.vaultNote;
};

export const askOtp = async () => {
    const { otp } = await prompt<{ otp: number }>([
        {
            type: 'number',
            name: 'otp',
            message: 'Please enter your OTP code:',
        },
    ]);
    return otp;
};

export const askToken = async () => {
    const { token } = await prompt<{ token: number }>([
        {
            type: 'number',
            name: 'token',
            message: 'Please enter the code you received by email:',
        },
    ]);
    return token;
};
